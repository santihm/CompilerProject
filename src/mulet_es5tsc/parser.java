
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package mulet_es5tsc;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\011\000\002\012\010\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\015\005\000\002\015\003" +
    "\000\002\016\003\000\002\016\004\000\002\017\004\000" +
    "\002\017\003\000\002\020\006\000\002\021\004\000\002" +
    "\021\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\006\000\002\025\005\000\002\026" +
    "\004\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\003\000\002\030\004\000\002\031\005\000" +
    "\002\031\005\000\002\031\003\000\002\032\005\000\002" +
    "\032\004\000\002\032\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\004\005\001\002\000\004\002\237\001" +
    "\002\000\006\022\011\053\006\001\002\000\010\007\ufff7" +
    "\011\236\012\120\001\002\000\004\007\231\001\002\000" +
    "\006\022\011\053\006\001\002\000\004\053\173\001\002" +
    "\000\004\005\016\001\002\000\004\005\ufffd\001\002\000" +
    "\006\022\011\053\006\001\002\000\004\005\ufffe\001\002" +
    "\000\002\001\002\000\034\014\033\015\042\016\040\017" +
    "\024\020\050\021\022\023\047\030\034\033\026\035\031" +
    "\036\043\037\030\053\036\001\002\000\034\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\023\ufffb\030\ufffb" +
    "\033\ufffb\035\ufffb\036\ufffb\037\ufffb\053\ufffb\001\002\000" +
    "\006\051\166\052\164\001\002\000\010\010\uffe9\051\uffe9" +
    "\052\uffe9\001\002\000\034\014\033\015\042\016\040\017" +
    "\024\020\050\021\022\023\047\030\034\033\026\035\031" +
    "\036\043\037\030\053\160\001\002\000\010\010\uffeb\051" +
    "\uffeb\052\uffeb\001\002\000\006\051\uffbd\052\uffbd\001\002" +
    "\000\004\023\152\001\002\000\004\006\151\001\002\000" +
    "\026\014\033\015\042\016\040\017\024\020\050\021\022" +
    "\023\047\036\043\037\030\053\053\001\002\000\026\014" +
    "\033\015\042\016\040\017\024\020\050\021\022\023\047" +
    "\036\043\037\030\053\053\001\002\000\010\010\145\051" +
    "\uffbe\052\uffbe\001\002\000\010\010\uffee\051\uffee\052\uffee" +
    "\001\002\000\004\023\132\001\002\000\014\010\uffce\024" +
    "\uffce\025\130\063\uffce\064\uffce\001\002\000\022\007\ufff7" +
    "\011\121\012\120\013\uffd0\023\054\051\uffbf\052\uffbf\062" +
    "\uffd0\001\002\000\006\006\uffdb\027\uffdb\001\002\000\010" +
    "\010\uffec\051\uffec\052\uffec\001\002\000\034\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\023\ufffc\030\ufffc" +
    "\033\ufffc\035\ufffc\036\ufffc\037\ufffc\053\ufffc\001\002\000" +
    "\010\010\uffed\051\uffed\052\uffed\001\002\000\026\014\033" +
    "\015\042\016\040\017\024\020\050\021\022\023\047\036" +
    "\043\037\030\053\053\001\002\000\006\063\113\064\114" +
    "\001\002\000\006\013\107\062\106\001\002\000\026\036" +
    "\061\040\062\041\077\042\073\043\065\044\076\045\071" +
    "\046\067\047\075\050\066\001\002\000\026\014\033\015" +
    "\042\016\040\017\024\020\050\021\022\023\047\036\043" +
    "\037\030\053\053\001\002\000\010\010\uffea\051\uffea\052" +
    "\uffea\001\002\000\004\024\060\001\002\000\006\051\uffbe" +
    "\052\uffbe\001\002\000\010\023\054\051\uffbf\052\uffbf\001" +
    "\002\000\030\014\033\015\042\016\040\017\024\020\050" +
    "\021\022\023\047\024\056\036\043\037\030\053\053\001" +
    "\002\000\004\024\057\001\002\000\010\010\uffcc\051\uffcc" +
    "\052\uffcc\001\002\000\010\010\uffcd\051\uffcd\052\uffcd\001" +
    "\002\000\006\051\uffc2\052\uffc2\001\002\000\026\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\036" +
    "\uffbb\037\uffbb\053\uffbb\001\002\000\026\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\036\uffba\037" +
    "\uffba\053\uffba\001\002\000\026\014\033\015\042\016\040" +
    "\017\024\020\050\021\022\023\047\036\043\037\030\053" +
    "\053\001\002\000\020\007\uffcb\010\uffcb\011\uffcb\024\uffcb" +
    "\025\uffcb\063\uffcb\064\uffcb\001\002\000\026\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\036\uffb7" +
    "\037\uffb7\053\uffb7\001\002\000\026\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\036\uffbc\037\uffbc" +
    "\053\uffbc\001\002\000\026\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\023\uffb4\036\uffb4\037\uffb4\053\uffb4" +
    "\001\002\000\020\007\uffc7\010\uffc7\011\uffc7\024\uffc7\025" +
    "\uffc7\063\uffc7\064\uffc7\001\002\000\026\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\036\uffb5\037" +
    "\uffb5\053\uffb5\001\002\000\026\014\033\015\042\016\040" +
    "\017\024\020\050\021\022\023\047\036\043\037\030\053" +
    "\053\001\002\000\026\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\023\uffb8\036\uffb8\037\uffb8\053\uffb8\001" +
    "\002\000\026\014\033\015\042\016\040\017\024\020\050" +
    "\021\022\023\047\036\043\037\030\053\053\001\002\000" +
    "\026\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\023\uffb3\036\uffb3\037\uffb3\053\uffb3\001\002\000\026\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6" +
    "\036\uffb6\037\uffb6\053\uffb6\001\002\000\026\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\036\uffb9" +
    "\037\uffb9\053\uffb9\001\002\000\026\036\061\040\062\041" +
    "\077\042\073\043\065\044\076\045\071\046\067\047\075" +
    "\050\066\001\002\000\020\007\uffc9\010\uffc9\011\uffc9\024" +
    "\uffc9\025\uffc9\063\uffc9\064\uffc9\001\002\000\026\036\061" +
    "\040\062\041\077\042\073\043\065\044\076\045\071\046" +
    "\067\047\075\050\066\001\002\000\020\007\uffc8\010\uffc8" +
    "\011\uffc8\024\uffc8\025\uffc8\063\uffc8\064\uffc8\001\002\000" +
    "\026\036\061\040\062\041\077\042\073\043\065\044\076" +
    "\045\071\046\067\047\075\050\066\001\002\000\020\007" +
    "\uffca\010\uffca\011\uffca\024\uffca\025\uffca\063\uffca\064\uffca" +
    "\001\002\000\004\010\112\001\002\000\026\014\033\015" +
    "\042\016\040\017\024\020\050\021\022\023\047\036\043" +
    "\037\030\053\053\001\002\000\004\010\111\001\002\000" +
    "\034\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\023\uffd7\030\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\053" +
    "\uffd7\001\002\000\034\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\023\uffda\030\uffda\033\uffda\035\uffda\036" +
    "\uffda\037\uffda\053\uffda\001\002\000\004\010\116\001\002" +
    "\000\004\010\115\001\002\000\034\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\030\uffd8\033\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\053\uffd8\001\002\000\034\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\030\uffd9\033\uffd9\035\uffd9\036\uffd9\037\uffd9\053\uffd9\001" +
    "\002\000\006\051\uffc1\052\uffc1\001\002\000\026\014\033" +
    "\015\042\016\040\017\024\020\050\021\022\023\047\036" +
    "\043\037\030\053\053\001\002\000\004\053\122\001\002" +
    "\000\014\007\ufff7\011\121\012\120\013\uffd0\062\uffd0\001" +
    "\002\000\004\007\ufff9\001\002\000\006\013\uffd1\062\uffd1" +
    "\001\002\000\006\007\ufff6\011\126\001\002\000\004\053" +
    "\006\001\002\000\004\007\ufff8\001\002\000\026\014\033" +
    "\015\042\016\040\017\024\020\050\021\022\023\047\036" +
    "\043\037\030\053\053\001\002\000\012\010\uffcf\024\uffcf" +
    "\063\uffcf\064\uffcf\001\002\000\026\014\033\015\042\016" +
    "\040\017\024\020\050\021\022\023\047\036\043\037\030" +
    "\053\053\001\002\000\004\024\134\001\002\000\004\031" +
    "\135\001\002\000\004\026\136\001\002\000\002\001\002" +
    "\000\036\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\030\uffd4\032\140\033\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\053\uffd4\001\002\000\004\026\136\001\002\000" +
    "\034\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\023\uffd5\030\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\053" +
    "\uffd5\001\002\000\034\014\033\015\042\016\040\017\024" +
    "\020\050\021\022\023\047\030\034\033\026\035\031\036" +
    "\043\037\030\053\036\001\002\000\004\027\144\001\002" +
    "\000\040\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021" +
    "\uffdd\022\uffdd\023\uffdd\030\uffdd\032\uffdd\033\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\053\uffdd\001\002\000\034\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\030\uffd6" +
    "\033\uffd6\035\uffd6\036\uffd6\037\uffd6\053\uffd6\001\002\000" +
    "\004\010\147\001\002\000\034\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\023\uffd2\030\uffd2\033\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\053\uffd2\001\002\000\006\051\uffc0" +
    "\052\uffc0\001\002\000\004\002\001\001\002\000\026\014" +
    "\033\015\042\016\040\017\024\020\050\021\022\023\047" +
    "\036\043\037\030\053\053\001\002\000\004\024\154\001" +
    "\002\000\004\034\155\001\002\000\004\026\136\001\002" +
    "\000\034\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\023\uffd3\030\uffd3\033\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\053\uffd3\001\002\000\006\006\uffdc\027\uffdc\001\002\000" +
    "\016\011\161\013\uffd0\023\054\051\uffbf\052\uffbf\062\uffd0" +
    "\001\002\000\004\053\162\001\002\000\010\011\161\013" +
    "\uffd0\062\uffd0\001\002\000\026\036\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\001\002\000\026\014\033\015\042\016\040\017\024" +
    "\020\050\021\022\023\047\036\043\037\030\053\053\001" +
    "\002\000\026\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\001\002\000" +
    "\026\014\033\015\042\016\040\017\024\020\050\021\022" +
    "\023\047\036\043\037\030\053\053\001\002\000\006\051" +
    "\166\052\164\001\002\000\026\036\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\001\002\000\006\051\166\052\164\001\002\000\026" +
    "\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\047\uffc4\050\uffc4\001\002\000\004\023\174" +
    "\001\002\000\010\024\202\053\175\061\200\001\002\000" +
    "\006\007\uffe1\025\uffe1\001\002\000\004\007\226\001\002" +
    "\000\006\007\uffe2\025\224\001\002\000\004\053\223\001" +
    "\002\000\004\024\220\001\002\000\004\007\206\001\002" +
    "\000\006\010\204\024\uffe5\001\002\000\006\053\175\061" +
    "\200\001\002\000\004\024\uffe6\001\002\000\014\054\215" +
    "\055\217\056\214\057\212\060\216\001\002\000\004\026" +
    "\uffde\001\002\000\004\026\136\001\002\000\006\022\uffe7" +
    "\053\uffe7\001\002\000\010\010\ufff0\024\ufff0\026\ufff0\001" +
    "\002\000\004\026\uffdf\001\002\000\010\010\ufff1\024\ufff1" +
    "\026\ufff1\001\002\000\010\010\ufff2\024\ufff2\026\ufff2\001" +
    "\002\000\010\010\uffef\024\uffef\026\uffef\001\002\000\010" +
    "\010\ufff3\024\ufff3\026\ufff3\001\002\000\004\007\206\001" +
    "\002\000\004\026\136\001\002\000\006\022\uffe8\053\uffe8" +
    "\001\002\000\006\007\uffe0\025\uffe0\001\002\000\006\053" +
    "\175\061\200\001\002\000\004\007\uffe3\001\002\000\014" +
    "\054\215\055\217\056\214\057\212\060\216\001\002\000" +
    "\006\010\uffe4\024\uffe4\001\002\000\004\005\uffff\001\002" +
    "\000\030\014\033\015\042\016\040\017\024\020\050\021" +
    "\022\054\215\055\217\056\214\057\212\060\216\001\002" +
    "\000\004\010\ufff5\001\002\000\004\010\235\001\002\000" +
    "\004\010\ufff4\001\002\000\036\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\030\ufffa\033" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\053\ufffa\001\002\000\004" +
    "\053\006\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\002\003\001\001\000\002\001\001\000" +
    "\014\003\011\005\007\006\006\012\013\036\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\227\005" +
    "\007\006\006\012\013\036\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\003\014\005" +
    "\007\006\006\012\013\036\012\001\001\000\002\001\001" +
    "\000\006\004\016\036\017\001\001\000\032\005\040\006" +
    "\006\011\024\021\026\022\022\023\044\024\043\025\031" +
    "\026\034\030\045\032\020\036\036\001\001\000\002\001" +
    "\001\000\006\031\162\036\164\001\001\000\002\001\001" +
    "\000\026\011\024\021\156\022\022\023\044\024\043\025" +
    "\031\026\034\030\045\032\020\036\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\024\025\051\032\147\001\001\000\014" +
    "\011\024\025\051\026\145\030\045\032\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\024" +
    "\025\051\032\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\027\063\033\062\034\071\035\073\036\067" +
    "\001\001\000\014\011\024\025\051\026\050\030\045\032" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\024\024\054\025" +
    "\051\026\034\030\045\032\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\024\025\051" +
    "\030\103\032\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\024\025\051\030\101\032" +
    "\020\001\001\000\002\001\001\000\012\011\024\025\051" +
    "\030\077\032\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\027\100\033\062\034\071" +
    "\035\073\036\067\001\001\000\002\001\001\000\014\027" +
    "\102\033\062\034\071\035\073\036\067\001\001\000\002" +
    "\001\001\000\014\027\104\033\062\034\071\035\073\036" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\011\024\024\107\025\051\026\034\030\045\032\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\024\025\051" +
    "\026\124\030\045\032\020\001\001\000\006\006\122\023" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\126\001\001\000" +
    "\002\001\001\000\016\011\024\024\130\025\051\026\034" +
    "\030\045\032\020\001\001\000\002\001\001\000\014\011" +
    "\024\025\051\026\132\030\045\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\136\001\001\000" +
    "\006\004\141\036\017\001\001\000\002\001\001\000\004" +
    "\020\140\001\001\000\002\001\001\000\032\005\040\006" +
    "\006\011\024\021\142\022\022\023\044\024\043\025\031" +
    "\026\034\030\045\032\020\036\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\011\024\025\051\026\152\030\045\032\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\024\025\051\032\170\001\001\000\002" +
    "\001\001\000\010\011\024\025\051\032\166\001\001\000" +
    "\006\031\167\036\164\001\001\000\002\001\001\000\006" +
    "\031\171\036\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\200\014\202\015\175\016\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\207\036\206" +
    "\001\001\000\002\001\001\000\012\013\204\014\202\015" +
    "\175\016\176\001\001\000\002\001\001\000\004\010\212" +
    "\001\001\000\002\001\001\000\004\020\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\220\036\206\001\001\000\004\020\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\224\016\176\001\001\000\002\001\001\000\004\010\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\232\010\231\011\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\122\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Vars ::= ID PIPE Vars 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Vars ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exprs ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Term ExprTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprTail ::= ArithOp Term ExprTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprTail",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprTail ::= RelOp Term ExprTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprTail",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprTail ::= BoolOp Term ExprTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprTail",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprTail ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprTail",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Term ::= Factor TermTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TermTail ::= TIMES Factor TermTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TermTail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TermTail ::= DIV Factor TermTail 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TermTail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TermTail ::= empty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TermTail",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Factor ::= LPAR Expr RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Factor ::= MINUS Factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Factor ::= NOT Factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Factor ::= FunCall 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Factor ::= Constant 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ArithOp ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ArithOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BoolOp ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BoolOp ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BoolOp",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RelOp ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RelOp ::= GE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RelOp ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RelOp ::= LE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RelOp ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RelOp ::= NE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
