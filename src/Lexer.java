// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: srcjflexcup/Lexer.jflex

import java_cup.runtime.Symbol;
import mulet_es5tsc.sym;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int COMMENT_SINGLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\4\0\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\21\1\22"+
    "\1\23\1\24\2\0\1\25\2\26\1\27\7\26\1\30"+
    "\1\31\7\26\1\32\5\26\1\0\1\33\2\0\1\26"+
    "\1\0\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\26\1\45\1\46\1\47\1\50\1\51"+
    "\1\26\1\52\1\53\1\54\1\55\1\26\1\56\3\26"+
    "\1\57\1\60\1\61\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\22\21\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\1\27\2\0\1\30\2\0\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\7\21\1\42\3\21\1\43\3\21\1\44\6\21\1\45"+
    "\1\46\1\0\1\47\1\50\1\51\1\52\3\21\1\53"+
    "\2\21\1\54\1\21\1\55\1\56\1\57\1\21\1\60"+
    "\5\21\2\0\1\21\1\61\1\62\1\21\1\63\4\21"+
    "\1\64\1\65\1\21\1\0\1\66\1\21\1\67\3\21"+
    "\1\70\1\71\1\72\1\21\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\u0190\0\u01c2"+
    "\0\u01f4\0\226\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\226"+
    "\0\226\0\226\0\226\0\u0640\0\u0672\0\226\0\u06a4\0\u012c"+
    "\0\226\0\u06d6\0\u0708\0\226\0\226\0\u073a\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u02ee\0\u0992\0\u09c4\0\u09f6\0\u02ee\0\u0a28\0\u0a5a\0\u0a8c"+
    "\0\u0abe\0\u0af0\0\u0b22\0\226\0\226\0\u0b54\0\u073a\0\u02ee"+
    "\0\u02ee\0\u02ee\0\u0b86\0\u0bb8\0\u0bea\0\u02ee\0\u0c1c\0\u0c4e"+
    "\0\u02ee\0\u0c80\0\u02ee\0\u02ee\0\u02ee\0\u0cb2\0\u02ee\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u02ee"+
    "\0\u02ee\0\u0e74\0\u02ee\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u02ee"+
    "\0\u02ee\0\u0f6e\0\u0fa0\0\u02ee\0\u0fd2\0\u02ee\0\u1004\0\u1036"+
    "\0\u1068\0\u02ee\0\226\0\u02ee\0\u109a\0\u02ee\0\u02ee\0\u02ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\4\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\3\27\1\30\1\27\1\4"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\27\1\37"+
    "\1\27\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\27\1\47\1\50\1\51\1\52\11\53\1\54\50\53"+
    "\2\55\1\56\57\55\63\0\3\5\102\0\1\57\35\0"+
    "\2\60\2\0\1\60\1\61\25\60\1\62\26\60\6\0"+
    "\1\63\64\0\1\64\4\0\1\65\60\0\1\66\1\0"+
    "\1\20\65\0\1\67\60\0\1\70\1\71\1\72\60\0"+
    "\1\73\61\0\1\74\1\75\54\0\1\27\5\0\2\27"+
    "\1\76\3\27\1\0\23\27\22\0\1\27\5\0\6\27"+
    "\1\0\23\27\22\0\1\27\5\0\5\27\1\77\1\0"+
    "\23\27\22\0\1\27\5\0\6\27\1\0\13\27\1\100"+
    "\7\27\22\0\1\27\5\0\6\27\1\0\4\27\1\101"+
    "\7\27\1\102\6\27\22\0\1\27\5\0\6\27\1\0"+
    "\7\27\1\103\13\27\22\0\1\27\5\0\6\27\1\0"+
    "\4\27\1\104\7\27\1\105\6\27\22\0\1\27\5\0"+
    "\6\27\1\0\11\27\1\106\1\27\1\107\7\27\22\0"+
    "\1\27\5\0\6\27\1\0\1\110\22\27\22\0\1\27"+
    "\5\0\6\27\1\0\5\27\1\111\5\27\1\112\7\27"+
    "\22\0\1\27\5\0\6\27\1\0\1\113\22\27\22\0"+
    "\1\27\5\0\6\27\1\0\14\27\1\114\6\27\22\0"+
    "\1\27\5\0\6\27\1\0\16\27\1\115\4\27\22\0"+
    "\1\27\5\0\6\27\1\0\16\27\1\116\4\27\22\0"+
    "\1\27\5\0\6\27\1\0\4\27\1\117\16\27\22\0"+
    "\1\27\5\0\6\27\1\0\20\27\1\120\2\27\22\0"+
    "\1\27\5\0\6\27\1\0\7\27\1\121\6\27\1\122"+
    "\4\27\22\0\1\27\5\0\6\27\1\0\7\27\1\123"+
    "\13\27\3\0\16\124\1\56\43\124\2\55\1\0\57\55"+
    "\24\0\1\125\42\0\1\60\25\0\1\60\1\0\1\60"+
    "\3\0\1\60\5\0\1\60\2\0\1\60\1\0\1\60"+
    "\13\0\1\126\72\0\1\127\61\0\1\27\5\0\2\27"+
    "\1\130\3\27\1\0\23\27\22\0\1\27\5\0\3\27"+
    "\1\131\2\27\1\0\23\27\22\0\1\27\5\0\6\27"+
    "\1\0\3\27\1\132\17\27\22\0\1\27\5\0\6\27"+
    "\1\0\6\27\1\133\14\27\22\0\1\27\5\0\6\27"+
    "\1\0\14\27\1\134\6\27\22\0\1\27\5\0\6\27"+
    "\1\0\1\135\22\27\22\0\1\27\5\0\6\27\1\0"+
    "\5\27\1\136\15\27\22\0\1\27\5\0\6\27\1\0"+
    "\21\27\1\137\1\27\22\0\1\27\5\0\6\27\1\0"+
    "\17\27\1\140\3\27\22\0\1\27\5\0\6\27\1\0"+
    "\3\27\1\141\17\27\22\0\1\27\5\0\6\27\1\0"+
    "\11\27\1\142\11\27\22\0\1\27\5\0\6\27\1\0"+
    "\20\27\1\143\2\27\22\0\1\27\5\0\6\27\1\0"+
    "\15\27\1\144\5\27\22\0\1\27\5\0\6\27\1\0"+
    "\20\27\1\145\2\27\22\0\1\27\5\0\6\27\1\0"+
    "\14\27\1\146\6\27\22\0\1\27\5\0\6\27\1\0"+
    "\5\27\1\147\12\27\1\150\2\27\22\0\1\27\5\0"+
    "\6\27\1\0\16\27\1\151\4\27\22\0\1\27\5\0"+
    "\6\27\1\0\4\27\1\152\16\27\22\0\1\27\5\0"+
    "\6\27\1\0\21\27\1\153\1\27\22\0\1\27\5\0"+
    "\6\27\1\0\10\27\1\154\12\27\3\0\2\155\2\0"+
    "\2\155\1\0\24\155\1\156\26\155\17\0\1\27\5\0"+
    "\6\27\1\0\10\27\1\157\12\27\22\0\1\27\5\0"+
    "\6\27\1\0\11\27\1\160\11\27\22\0\1\27\5\0"+
    "\6\27\1\0\16\27\1\161\4\27\22\0\1\27\5\0"+
    "\6\27\1\0\1\27\1\162\21\27\22\0\1\27\5\0"+
    "\6\27\1\0\4\27\1\163\16\27\22\0\1\27\5\0"+
    "\6\27\1\0\17\27\1\164\3\27\22\0\1\27\5\0"+
    "\6\27\1\0\6\27\1\165\14\27\22\0\1\27\5\0"+
    "\6\27\1\0\21\27\1\166\1\27\22\0\1\27\5\0"+
    "\6\27\1\0\10\27\1\167\12\27\22\0\1\27\5\0"+
    "\6\27\1\0\13\27\1\170\7\27\22\0\1\27\5\0"+
    "\6\27\1\0\4\27\1\171\16\27\22\0\1\27\5\0"+
    "\6\27\1\0\11\27\1\172\11\27\11\0\1\173\61\0"+
    "\1\155\24\0\1\155\1\0\1\155\3\0\1\155\5\0"+
    "\1\155\2\0\1\155\1\0\1\155\24\0\1\27\5\0"+
    "\6\27\1\0\13\27\1\174\7\27\22\0\1\27\5\0"+
    "\6\27\1\0\11\27\1\175\11\27\22\0\1\27\5\0"+
    "\6\27\1\0\4\27\1\176\16\27\22\0\1\27\5\0"+
    "\6\27\1\0\16\27\1\177\4\27\22\0\1\27\5\0"+
    "\6\27\1\0\16\27\1\200\4\27\22\0\1\27\5\0"+
    "\6\27\1\0\13\27\1\201\7\27\22\0\1\27\5\0"+
    "\6\27\1\0\4\27\1\202\16\27\11\0\1\203\72\0"+
    "\1\27\5\0\6\27\1\0\4\27\1\204\16\27\22\0"+
    "\1\27\5\0\6\27\1\0\1\205\22\27\22\0\1\27"+
    "\5\0\6\27\1\0\13\27\1\206\7\27\22\0\1\27"+
    "\5\0\6\27\1\0\6\27\1\207\14\27\22\0\1\27"+
    "\5\0\6\27\1\0\12\27\1\210\10\27\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4300];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\6\11\3\1\1\11\25\1\4\11"+
    "\1\0\1\1\1\11\2\0\1\11\2\0\2\11\1\0"+
    "\7\11\26\1\2\11\1\0\26\1\2\0\14\1\1\0"+
    "\7\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
// Helper methods to build symbols
private Symbol symbol(int identifier) {
    return new Symbol(identifier, yyline, yycolumn);
}

private Symbol symbol(int identifier, Object value) {
    return new Symbol(identifier, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case COMMENT: {
              throw new Error("Unclosed comment block");
            }  // fall though
            case 137: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.ERROR, "Illegal character: " + yytext());
            }
            // fall through
          case 62: break;
          case 2:
            { /* Ignore whitespace */
            }
            // fall through
          case 63: break;
          case 3:
            { throw new Error("Unterminated string literal");
            }
            // fall through
          case 64: break;
          case 4:
            { return symbol(sym.LPAR);
            }
            // fall through
          case 65: break;
          case 5:
            { return symbol(sym.RPAR);
            }
            // fall through
          case 66: break;
          case 6:
            { return symbol(sym.TIMES);
            }
            // fall through
          case 67: break;
          case 7:
            { return symbol(sym.PLUS);
            }
            // fall through
          case 68: break;
          case 8:
            { return symbol(sym.COMMA);
            }
            // fall through
          case 69: break;
          case 9:
            { return symbol(sym.MINUS);
            }
            // fall through
          case 70: break;
          case 10:
            { return symbol(sym.DIV);
            }
            // fall through
          case 71: break;
          case 11:
            { return symbol(sym.INT_CONST, Integer.parseInt(yytext()));
            }
            // fall through
          case 72: break;
          case 12:
            { return symbol(sym.COLON);
            }
            // fall through
          case 73: break;
          case 13:
            { return symbol(sym.SEMI);
            }
            // fall through
          case 74: break;
          case 14:
            { return symbol(sym.LT);
            }
            // fall through
          case 75: break;
          case 15:
            { return symbol(sym.ASSIGNDECL);
            }
            // fall through
          case 76: break;
          case 16:
            { return symbol(sym.GT);
            }
            // fall through
          case 77: break;
          case 17:
            { return symbol(sym.ID, yytext());
            }
            // fall through
          case 78: break;
          case 18:
            { return symbol(sym.LBRAC);
            }
            // fall through
          case 79: break;
          case 19:
            { return symbol(sym.PIPE);
            }
            // fall through
          case 80: break;
          case 20:
            { return symbol(sym.RBRAC);
            }
            // fall through
          case 81: break;
          case 21:
            { /* Consume content inside the comment */
            }
            // fall through
          case 82: break;
          case 22:
            { /* Consume line of comment */
            }
            // fall through
          case 83: break;
          case 23:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 84: break;
          case 24:
            { return symbol(sym.STRING_CONST, yytext());
            }
            // fall through
          case 85: break;
          case 25:
            { yybegin(COMMENT);
            }
            // fall through
          case 86: break;
          case 26:
            { yybegin(COMMENT_SINGLE);
            }
            // fall through
          case 87: break;
          case 27:
            { return symbol(sym.ASSIGN);
            }
            // fall through
          case 88: break;
          case 28:
            { return symbol(sym.IN);
            }
            // fall through
          case 89: break;
          case 29:
            { return symbol(sym.LE);
            }
            // fall through
          case 90: break;
          case 30:
            { return symbol(sym.NE);
            }
            // fall through
          case 91: break;
          case 31:
            { return symbol(sym.EQ);
            }
            // fall through
          case 92: break;
          case 32:
            { return symbol(sym.GE);
            }
            // fall through
          case 93: break;
          case 33:
            { return symbol(sym.OUT);
            }
            // fall through
          case 94: break;
          case 34:
            { return symbol(sym.DO);
            }
            // fall through
          case 95: break;
          case 35:
            { return symbol(sym.IF);
            }
            // fall through
          case 96: break;
          case 36:
            { return symbol(sym.OR);
            }
            // fall through
          case 97: break;
          case 37:
            { /* Ignore '*' not followed by '/' */
            }
            // fall through
          case 98: break;
          case 38:
            { return symbol(sym.OUTNL);
            }
            // fall through
          case 99: break;
          case 39:
            { return symbol(sym.DOUBLE_CONST, Double.parseDouble(yytext()));
            }
            // fall through
          case 100: break;
          case 40:
            { return symbol(sym.ADD);
            }
            // fall through
          case 101: break;
          case 41:
            { return symbol(sym.MUL);
            }
            // fall through
          case 102: break;
          case 42:
            { return symbol(sym.AND);
            }
            // fall through
          case 103: break;
          case 43:
            { return symbol(sym.DEF);
            }
            // fall through
          case 104: break;
          case 44:
            { return symbol(sym.END);
            }
            // fall through
          case 105: break;
          case 45:
            { return symbol(sym.INT);
            }
            // fall through
          case 106: break;
          case 46:
            { return symbol(sym.MAP);
            }
            // fall through
          case 107: break;
          case 47:
            { return symbol(sym.NOT);
            }
            // fall through
          case 108: break;
          case 48:
            { return symbol(sym.REF);
            }
            // fall through
          case 109: break;
          case 49:
            { return symbol(sym.BOOL);
            }
            // fall through
          case 110: break;
          case 50:
            { return symbol(sym.CHAR);
            }
            // fall through
          case 111: break;
          case 51:
            { return symbol(sym.ELSE);
            }
            // fall through
          case 112: break;
          case 52:
            { return symbol(sym.THEN);
            }
            // fall through
          case 113: break;
          case 53:
            { return symbol(sym.TRUE);
            }
            // fall through
          case 114: break;
          case 54:
            { return symbol(sym.BEGIN);
            }
            // fall through
          case 115: break;
          case 55:
            { return symbol(sym.FALSE);
            }
            // fall through
          case 116: break;
          case 56:
            { return symbol(sym.WHILE);
            }
            // fall through
          case 117: break;
          case 57:
            { return symbol(sym.CHAR_CONST, yytext());
            }
            // fall through
          case 118: break;
          case 58:
            { return symbol(sym.DOUBLE);
            }
            // fall through
          case 119: break;
          case 59:
            { return symbol(sym.RETURN);
            }
            // fall through
          case 120: break;
          case 60:
            { return symbol(sym.STRING);
            }
            // fall through
          case 121: break;
          case 61:
            { return symbol(sym.PROGRAM);
            }
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
